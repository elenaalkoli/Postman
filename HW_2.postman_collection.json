{
	"info": {
		"_postman_id": "03ec08a5-d5d6-4ec2-9e58-bbedc806c59c",
		"name": "HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Body check\", function () {\r",
							"    pm.response.to.have.body(\"This is the first responce from server!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// http://162.55.220.72:5005/user_info_3\r",
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"// 3. Спарсить response body в json.\r",
							"// 4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"// 5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"// 6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"// 7. Спарсить request.\r",
							"// 8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"// 9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"// 10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"// 11. Вывести в консоль параметр family из response.\r",
							"// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"\r",
							"\r",
							"// 2. Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 3. Спарсить response body в json.\r",
							"\r",
							"let jsonData = pm.response.json();\r",
							"console.log(\"response =\", jsonData)\r",
							"\r",
							"// 4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"let name_check = jsonData.name\r",
							"console.log(name_check)\r",
							"pm.test(\"name_check\", function () {\r",
							"    pm.expect(name_check).to.eql(\"Elena\");\r",
							"});\r",
							"// 5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"let age_check = jsonData.age\r",
							"console.log(age_check)\r",
							"pm.test(\"age_check\", function () {\r",
							"    pm.expect(age_check).to.eql+(30); //Преобразовали число в строку (+), тк в json в respons приходит строка\r",
							" });\r",
							"\r",
							" // 6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"let salary_check = jsonData.salary\r",
							"console.log(salary_check)\r",
							"pm.test(\"salary_check\", function () {\r",
							"    pm.expect(salary_check).to.eql+(2000); //Преобразовали число в строку (+), тк в json в respons приходит строка\r",
							" });\r",
							"\r",
							" // 7. Спарсить request.\r",
							"let req4 = request.data\r",
							"console.log(\"request = \", req4)\r",
							"\r",
							"// 8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"let name_response = jsonData.name\r",
							"console.log(name_response)\r",
							"let name_request = req4.name\r",
							"pm.test(\"name_check2\", function () {\r",
							"    pm.expect(name_response).to.eql(req4.name);\r",
							"});\r",
							"\r",
							"// 9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"let age_response = jsonData.age\r",
							"console.log(age_response)\r",
							"let age_request = req4.age\r",
							"pm.test(\"age_check2\", function () {\r",
							"    pm.expect(age_response).to.eql(req4.age);\r",
							"});\r",
							"\r",
							"\r",
							"// 10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"let salary_response = jsonData.salary\r",
							"console.log(salary_response)\r",
							"let salary_request = req4.salary\r",
							"pm.test(\"salary_check2\", function () {\r",
							"    pm.expect(salary_response).to.eql(+req4.salary);\r",
							"});\r",
							"\r",
							"// 11. Вывести в консоль параметр family из response.\r",
							"let family_response = jsonData.family\r",
							"console.log (\"family from repsonse = \", family_response)\r",
							"\r",
							"// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"let salary_response2 = jsonData.family.u_salary_1_5_year\r",
							"console.log(salary_response2)\r",
							"let salary_request2 = request.data.salary\r",
							"console.log(+salary_request2)\r",
							"pm.test(\"salary_check3\", function () {\r",
							"    pm.expect(salary_response2).to.eql(salary_request2 * 4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Elena"
						},
						{
							"key": "age",
							"value": "30"
						},
						{
							"key": "salary",
							"value": "2000",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					],
					"query": [
						{
							"key": "",
							"value": "",
							"disabled": true
						},
						{
							"key": "",
							"value": "",
							"disabled": true
						},
						{
							"key": "",
							"value": "",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"// http://162.55.220.72:5005/object_info_3\r",
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"// 3. Спарсить response body в json.\r",
							"// 4. Спарсить request.\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"// 8. Вывести в консоль параметр family из response.\r",
							"// 9. Проверить, что у параметра dog есть параметры name.\r",
							"// 10. Проверить, что у параметра dog есть параметры age.\r",
							"// 11. Проверить, что параметр name имеет значение Luky.\r",
							"// 12. Проверить, что параметр age имеет значение 4.\r",
							"\r",
							"\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"let jsonData = pm.response.json()\r",
							"console.log(\"response = \", jsonData)\r",
							"\r",
							"// 4. Спарсить request.\r",
							"let req5 = pm.request.url.query.toObject()\r",
							"console.log(\"request = \", req5)\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"let name_resp1 = jsonData.name\r",
							"console.log(name_resp1)\r",
							"let name_req1 = req5.name\r",
							"console.log(name_req1)\r",
							"pm.test(\"name_check1\", function () {\r",
							"    pm.expect(name_resp1).to.eql(name_req1);\r",
							"});\r",
							"\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"let age_resp1 = jsonData.age\r",
							"console.log(age_resp1)\r",
							"let age_req1 = req5.age\r",
							"console.log(age_req1)\r",
							"pm.test(\"age_check1\", function () {\r",
							"    pm.expect(age_resp1).to.eql(age_req1);\r",
							"});\r",
							"\r",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"let salary_resp1 = jsonData.salary\r",
							"console.log(salary_resp1)\r",
							"let salary_req1 = req5.salary\r",
							"console.log(salary_req1)\r",
							"pm.test(\"salary_check1\", function () {\r",
							"    pm.expect(salary_resp1).to.eql(+salary_req1);\r",
							"});\r",
							"\r",
							"// 8. Вывести в консоль параметр family из response.\r",
							"let family_resp1 = jsonData.family\r",
							"console.log(family_resp1)\r",
							"\r",
							"// 9. Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"dog_name\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog).to.have.property(\"name\");\r",
							"});\r",
							"\r",
							"// 10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"dog_age\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog).to.have.property(\"age\");\r",
							"});\r",
							"\r",
							"// 11. Проверить, что параметр name имеет значение Luky.\r",
							"\r",
							"let dog_name = jsonData.family.pets.dog.name\r",
							"console.log(dog_name)\r",
							"pm.test(\"dog_name is Luky\", function () {\r",
							"    pm.expect(dog_name).to.eql(\"Luky\");\r",
							"});\r",
							"\r",
							"// 12. Проверить, что параметр age имеет значение 4.\r",
							"let dog_age = jsonData.family.pets.dog.age\r",
							"console.log(dog_age)\r",
							"pm.test(\"dog_age is 4\", function () {\r",
							"    pm.expect(dog_age).to.eql(4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Elena&age=30&salary=2500",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Elena"
						},
						{
							"key": "age",
							"value": "30"
						},
						{
							"key": "salary",
							"value": "2500"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// http://162.55.220.72:5005/object_info_4\r",
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"// 3. Спарсить response body в json.\r",
							"// 4. Спарсить request.\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"// 7. Вывести в консоль параметр salary из request.\r",
							"// 8. Вывести в консоль параметр salary из response.\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"// 15. Создать в окружении переменную name\r",
							"// 16. Создать в окружении переменную age\r",
							"// 17. Создать в окружении переменную salary\r",
							"// 18. Передать в окружение переменную name\r",
							"// 19. Передать в окружение переменную age\r",
							"// 20. Передать в окружение переменную salary\r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"let resp1 = pm.response.json()\r",
							"console.log(resp1)\r",
							"\r",
							"// 4. Спарсить request.\r",
							"let req1 = pm.request.url.query.toObject()\r",
							"console.log(\"request = \", req1)\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"let name_resp1 = resp1.name\r",
							"console.log(\"name_resp = \", name_resp1)\r",
							"let name_req1 = req1.name\r",
							"console.log(\"name_req= \", name_req1)\r",
							"pm.test(\"name_check\", function () {\r",
							"    pm.expect(name_resp1).to.eql(name_req1);\r",
							"});\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"let age_resp1 = resp1.age\r",
							"console.log(\"age_resp = \", age_resp1)\r",
							"let age_req1 = req1.age\r",
							"console.log(\"age_req= \", age_req1)\r",
							"pm.test(\"age_check\", function () {\r",
							"    pm.expect(age_resp1).to.eql(+age_req1);\r",
							"});\r",
							"\r",
							"// 7. Вывести в консоль параметр salary из request.\r",
							"let salary_req = req1.salary\r",
							"console.log(\"salary_req = \", salary_req)\r",
							"\r",
							"// 8. Вывести в консоль параметр salary из response.\r",
							"let salary_resp = resp1.salary\r",
							"console.log(\"salary_resp = \", salary_resp)\r",
							"\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(resp1.salary[0])\r",
							"\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(resp1.salary[1])\r",
							"\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(resp1.salary[2])\r",
							"\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"salary_elements1\", function () {\r",
							"    pm.expect(resp1.salary[0]).to.eql(+salary_req);\r",
							"});\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"salary_elements2\", function () {\r",
							"    pm.expect(+resp1.salary[1]).to.eql(salary_req * 2);\r",
							"});\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"salary_elements3\", function () {\r",
							"    pm.expect(+resp1.salary[2]).to.eql(salary_req * 3);\r",
							"});\r",
							"\r",
							"// 15. Создать в окружении переменную name\r",
							"  pm.environment.set(\"name\")\r",
							"// 16. Создать в окружении переменную age\r",
							"  pm.environment.set(\"age\")\r",
							"// 17. Создать в окружении переменную salary\r",
							"  pm.environment.set(\"salary\")\r",
							"  \r",
							"// 18. Передать в окружение переменную name\r",
							" pm.environment.set(\"name\", name_req1);\r",
							"// 19. Передать в окружение переменную age\r",
							"  pm.environment.set(\"age\", age_req1);\r",
							"// 20. Передать в окружение переменную salary\r",
							"  pm.environment.set(\"salary\", salary_req);\r",
							"\r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"console.log(\"-------------------------------\")\r",
							"resp1.salary.forEach(element => console.log(element))\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Elena&age=30&salary=2500",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Elena"
						},
						{
							"key": "age",
							"value": "30"
						},
						{
							"key": "salary",
							"value": "2500"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// http://162.55.220.72:5005/user_info_2\r",
							"// 1. Вставить параметр salary из окружения в request\r",
							"// 2. Вставить параметр age из окружения в age\r",
							"// 3. Вставить параметр name из окружения в name\r",
							"// 4. Отправить запрос.\r",
							"// 5. Статус код 200\r",
							"// 6. Спарсить response body в json.\r",
							"// 7. Спарсить request.\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"\r",
							"\r",
							"// 1. Вставить параметр salary из окружения в request\r",
							"// 2. Вставить параметр age из окружения в age\r",
							"// 3. Вставить параметр name из окружения в name\r",
							"\r",
							"// Вставили {{salary}}, {{age}}, {{name}} в Body -> form-data -> Value\r",
							"\r",
							"// 5. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 6. Спарсить response body в json.\r",
							"let resp1 = pm.response.json()\r",
							"console.log(resp1)\r",
							"\r",
							"// 7. Спарсить request.\r",
							"let req1 = request.data\r",
							"console.log(req1)\r",
							"\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"start_qa_salary_property\", function () {\r",
							"    pm.expect(resp1).to.have.property(\"start_qa_salary\");\r",
							"});\r",
							"\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"qa_salary_after_6_months_property\", function () {\r",
							"    pm.expect(resp1).to.have.property(\"qa_salary_after_6_months\");\r",
							"});\r",
							"\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"qa_salary_after_12_months_property\", function () {\r",
							"    pm.expect(resp1).to.have.property(\"qa_salary_after_12_months\");\r",
							"});\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"qa_salary_after_1.5_year_property\", function () {\r",
							"    pm.expect(resp1).to.have.property(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"qa_salary_after_3.5_years_property\", function () {\r",
							"    pm.expect(resp1).to.have.property(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"person_property\", function () {\r",
							"    pm.expect(resp1).to.have.property(\"person\");\r",
							"});\r",
							"\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"let start_qa_salary = resp1.start_qa_salary\r",
							"console.log(start_qa_salary) //Увидели, что выводится ЧИСЛО. \r",
							"console.log(req1.salary) //Увидели, что выводится СТРОКА. \r",
							"pm.test(\"start_qa_salary_check\", function () {\r",
							"    pm.expect(start_qa_salary).to.eql(+req1.salary); //Приводим req1.salary к чисту, тк. тест вернет значение true только в том случае, если и тип, и значение равны.\r",
							"});\r",
							"\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_6_months_check\", function () {\r",
							"    pm.expect(resp1.qa_salary_after_6_months).to.eql(+req1.salary *2);\r",
							"});\r",
							"\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_12_months_check\", function () {\r",
							"    pm.expect(resp1.qa_salary_after_12_months).to.eql(+req1.salary *2.7);\r",
							"});\r",
							"\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"console.log(resp1[\"qa_salary_after_1.5_year\"]) //Синтаксис ругался на точку 1.5 , поэтому взяли значение в [\"\"]\r",
							"pm.test(\"qa_salary_after_1.5_year_check\", function () {\r",
							"    pm.expect(resp1[\"qa_salary_after_1.5_year\"]).to.eql(+req1.salary *3.3);\r",
							"});\r",
							"\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_3.5_years_check\", function () {\r",
							"    pm.expect(resp1[\"qa_salary_after_3.5_years\"]).to.eql(+req1.salary *3.8);\r",
							"});\r",
							"\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"person_element_check\", function () {\r",
							"    pm.expect(resp1.person.u_name[1]).to.eql(+req1.salary);\r",
							"});\r",
							"\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"person_element_check2\", function () {\r",
							"    pm.expect(resp1.person.u_age).to.eql(+req1.age);\r",
							"});\r",
							"\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"person_element_check3\", function () {\r",
							"    pm.expect(resp1.person.u_salary_5_years).to.eql(+req1.salary * 4.2);\r",
							"});\r",
							"\r",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"// console.log(\"-------------------------------\")\r",
							"// for(let i = 0; i < resp1.person.u_name.length; i++ ){\r",
							"//        console.log(resp1.person.u_name[i])\r",
							"//     } \r",
							"// console.log(\"-------------------------------\")\r",
							"//     // let a = Object.keys(resp1.person).length; //Посчитали кол-во объектов в person (не то)\r",
							"//     // console.log(a)\r",
							"\r",
							"// console.log(\"-------------------------------\")\r",
							"// for(let i = 0; i < Object.keys(resp1.person).length; i++ ){\r",
							"//        console.log(resp1.person[i])\r",
							"//     } \r",
							"let person_key = resp1.person.length\r",
							"for (let person_key in resp1.person){\r",
							"console.log(person_key + \" : \" + resp1.person[person_key])\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "default"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "default"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}